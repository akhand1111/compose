#!/bin/bash
set -eo pipefail
readonly SCRIPT=$(basename "$0")
readonly YELLOW=$'\e[1;33m'
readonly GREEN=$'\e[1;32m'
readonly RED=$'\e[1;31m'
readonly BLUE=$'\e[1;34m'
readonly NC=$'\e[0m'
readonly UPSTREAM_URL="https://github.com/docker/compose"

function print_info()
{
  printf "✦ %s \n" "$@"
}

function print_success()
{
  printf "%s✔ %s %s\n" "${GREEN}" "$@" "${NC}"
}

function print_warning()
{
  printf "%s⚠ %s %s\n" "${YELLOW}" "$@" "${NC}"
}

function print_error()
{
   printf "%s✖ %s %s\n" "${RED}" "$@" "${NC}"
}

function print_notice()
{
  printf "%s✦ %s %s\n" "${BLUE}" "$@" "${NC}"
}


function display_usage()
{
#Prints out help menu
cat <<EOF
Usage: ${GREEN}${SCRIPT} ${BLUE}  [options]${NC}

Adds Upstream remote URL for this repo and disables
push for it.
-----------------------------------------------------------
[-r --rebase]           [Rebase instead of merge]
[-h --help]             [Display this help message]
EOF
}

function disable_upstream_push()
{
  # check if push needs to be disabled
  if [[ $(git remote get-url --push upstream) == "DISABLED" ]]; then
      print_success "Upstream push is already disabled"
    else
      print_notice "Disabling upstream push"
      if git remote set-url --push upstream DISABLED > /dev/null 2>&1; then
        print_success "Done"
      else
        print_error "Failed to disable upstream push"
        exit 1
      fi
  fi

}

function configure_upstream()
{
  local upstream_url
  if upstream_url=$(git remote get-url upstream 2>/dev/null ); then
    if [[ $upstream_url == "$UPSTREAM_URL" ]]; then
      print_success "Upstream already exists"
      disable_upstream_push
    else
      print_warning "Remote 'upstream' exists and has a different URL"
      if git remote set-url upstream "${UPSTREAM_URL}" > /dev/null 2>&1; then
        print_success "Replaced ${UPSTREAM_URL}"
        disable_upstream_push
      else
        print_error "Failed to fix upstream ${UPSTREAM_URL}"
        exit 1
      fi
    fi
  else
    print_notice "There seems to be no remote named upstream, adding now"
    if git remote add upstream "${UPSTREAM_URL}" > /dev/null 2>&1; then
      print_success "Added ${UPSTREAM_URL} as upstream"
      disable_upstream_push
    else
      print_error "Failed to add upstream remote ${UPSTREAM_URL}"
      exit 1
    fi
  fi
}

function update_fork()
{
  print_info "checkout master"
  git checkout master
  print_info "Getting upstream branch master"
  git fetch upstream

  if [[ $rebase_action == "true"  ]];then
    print_notice "Using rebase"
    git rebase upstream/master
  else
    print_notice "Using ff merge"
    git merge upstream/master master
    CONFLICTS=$(git ls-files -u | wc -l)
    if [ "$CONFLICTS" -gt 0 ] ; then
      print_error "Oops! merge conflict(s). Aborting"
      git merge --abort
      exit 1
    fi
  fi

  ##
  print_notice "Pushing back changes..."
  git push
  print_notice "Pushing back tags..."
  git push --tags


}

function main()
{

  while [ "${1}" != "" ]; do
    case ${1} in
      -r | --rebase )             rebase_action="true"
                                  ;;
      -h | --help )               display_usage;
                                  exit $?
                                  ;;
      * )                         print_error "Invalid argument(s). See usage below."
                                  usage;
                                  exit 1
                                  ;;
    esac
    shift
  done

    configure_upstream
    update_fork

}

main "$@"